from smolagents import CodeAgent, LiteLLMModel


class MultiAgent:
    """
    A class for managing and running multiple agents for a specific task.

    This class initializes and manages a primary agent (the 'manager_agent')
    that can utilize other specialized agents (like 'sql_optimazer_agent') to
    achieve a complex goal. In this case, the goal is to optimize BigQuery queries.

    Attributes:
        agent (CodeAgent): The main agent (manager_agent) responsible for
            coordinating the task.  It is initialized with specified tools
            and manages other agents.
        prompt_template (str): A template for the user prompt, which includes
            the query to be optimized.  The query is inserted into the '{}'
            placeholder.
    """

    def __init__(
        self,
        model: LiteLLMModel,
        tools: list = [],
        prompt_template: str = (
            "Optimize Bigquery query if possible. "
            "Use use antipaterns and table metadata info. "
            "Return optimazed working version of query only.\nQuery: '{}'."
        ),
    ):
        """
        Initializes the MultiAgent with a language model, tools, and prompt template.

        Args:
            model (LiteLLMModel): The language model to be used by the agents.
            tools (list, optional): A list of tools that the agents can use.
                Defaults to an empty list.
            prompt_template (str, optional): The template for user prompts.
                Defaults to a specific template for SQL query optimization.
        """
        self.agent = self.build_agent(model=model, tools=tools)
        self.prompt_template = prompt_template

    def build_agent(self, model, tools: list = []):
        """
        Builds and configures the agents.

        This method creates two agents: a 'sql_optimazer_agent' for optimizing
        SQL queries and a 'manager_agent' to manage the optimization process.
        The manager agent is given the sql optimizer agent to manage.

        Args:
            model: The language model to be used by the agents.
            tools (list, optional): A list of tools for the sql_optimazer_agent.
                Defaults to an empty list.

        Returns:
            CodeAgent: The 'manager_agent', which is the primary agent.
        """
        sql_optimazer_agent = CodeAgent(
            tools=tools,
            model=model,
            max_steps=10,
            name="sql_optimazer_agent",
            description="This is an agent that can optimize SQL queries. It can use information about antipatterns, tables metadata.",
        )
        manager_agent = CodeAgent(
            tools=[],
            model=model,
            name="manager_agent",
            max_steps=10,
            managed_agents=[sql_optimazer_agent],
        )
        manager_agent.visualize()
        return manager_agent

    def run(self, prompt, history):
        """
        Runs the agents to process a given prompt.

        This method formats the user prompt using the stored template and
        runs the main agent ('manager_agent') to generate an answer.

        Args:
            prompt (str): The user's input prompt (e.g., the SQL query to optimize).
            history (list): The conversation history.  (This argument is not used
                in the current implementation but is included for potential
                future use).

        Returns:
            str: The answer generated by the agent (e.g., the optimized SQL query).
        """
        user_prompt = self.prompt_template.format(prompt)
        answer = self.agent.run(user_prompt)
        return answer
